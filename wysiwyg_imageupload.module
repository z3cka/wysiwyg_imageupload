<?php
// $Id$
// Copyright (c) 2010 KontextWork GbR
// Author: Eugen Mayer

require_once('wysiwyg_imageupload.file.inc');
require_once('wysiwyg_imageupload.form.inc');
require_once('wysiwyg_imageupload.ajax.inc');
require_once('wysiwyg_imageupload.filter.inc');

/**
* Implementes hook_menu().
*/
function wysiwyg_imageupload_menu() {
  $items = array();
  $items['wysiwy_imageupload/upload/%'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('wysiwyg_imageupload_upload_form', 2),
    'access callback' => 'user_access',
    'access arguments' => array('use wysiwyg image upload'),
    'type' => MENU_CALLBACK,
  );
  // Render for WYSIWYG
  $items['ajax/wysiwyg_imgupl/render_wysiwyg/%'] = array(
    'page callback' => '_wysiwyg_imageupload_render_wysiwyg',
    'page arguments' => array(3),
    'access callback' => 'user_access',
    'access arguments' => array('use wysiwyg image upload'),
    'type' => MENU_CALLBACK,
  );

  // return multiple rendered images
  $items['ajax/wysiwyg_imgupl/render_wysiwyg_images/%'] = array(
    'page callback' => '_wysiwyg_imageupload_render_wysiwyg_images',
    'page arguments' => array(3,4,5),
    'access callback' => 'user_access',
    'access arguments' => array('use wysiwyg image upload'),
    'type' => MENU_CALLBACK,
  );
  // Form for editing an image
  $items['wysiwyg_imageupload/edit/%'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('wysiwyg_imageupload_edit_form',2),
    'access callback' => 'user_access',
    'access arguments' => array('use wysiwyg image upload'),
    'type' => MENU_CALLBACK,
  );

  $items['admin/settings/wysiwyg_imageupload'] = array (
    'type' => MENU_NORMAL_ITEM,
    'title' => 'WYSIWYG Image upload',
    'description' => 'Configuration options for the WYSIWYG Image upload module',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('wysiwyg_imageupload_admin_settings'),
    'access arguments' => array('administer site configuration'),
    'file' => 'wysiwyg_imageupload.admin.inc'
  );

  return $items;
}

/**
* Implementing the hook_wysiwyg_include_directory().
* This is needed to register our WYSIWYG Plugin
*/
function wysiwyg_imageupload_wysiwyg_include_directory($type) {
  switch ($type) {
    case 'plugins':
      return $type;
  }
}

/**
* Adding general styles like floating and default style
*/
function wysiwyg_imageupload_init() {
  drupal_add_css(drupal_get_path('module','wysiwyg_imageupload').'/plugins/imgupload/imgupload.css');
}

/**
* Implementation of hook_perm().
*/
function wysiwyg_imageupload_perm() {
  return array('use wysiwyg image upload');
}

/**
* Implementation of hook_nodeapi().
*/
function wysiwyg_imageupload_nodeapi(&$node, $op, $teaser) {
  switch ($op) {
    case 'load':
      $output['imgupload_images'] = _wysiwyg_imageupload_load($node);
      return $output;
    break;
    case 'insert':
    case 'update':
      if (user_access('use wysiwyg image upload')) {
        _wysiwyg_imageupload_save($node);
      }
      break;
    case 'delete':
      _wysiwyg_imageupload_handle_node_delete($node->nid);
    break;
  }
}

/**
* implementation of hook_comment().
*/
function wysiwyg_imageupload_comment(&$a1, $op) {
  switch ($op) {
    case 'insert':
    case 'update':
      $comment = $a1;
      if (user_access('use wysiwyg image upload')) {
        _wysiwyg_imageupload_save($comment);
      }
      break;
  }
}


/**
* Returns all the image styles to show in the selection
*/
function _wysiwyg_imageupload_get_image_styles() {
  // Must have the format: Descriptive=css_style,Descriptive2=css_style2..
  $settings = variable_get('wysiwyg_imageupload_imgstyles', '');
  $styles = array();
  if ($settings != '') {
    foreach (explode(',', $settings) as $style) {
      $style = explode('=',$style);
      $styles[$style[1]] = t("!style",array('!style' => $style[0]));
    }
  }
  drupal_alter('wysiwyg_imageupload_image_styles', $styles);
  return $styles;
}

/**
* API: returns the filepath of a file
* @fid: the file id
*/
function wysiwyg_imageupload_get_imageurl($fid) {
  return db_result(db_query('select filepath from {files} where fid=%d',$fid));
}

/**
* API: loads a file-object using the path as key
* @path: the path of the file
*/
function wysiwyg_imageupload_get_file($path) {
  return db_fetch_object(db_query('select * from {files} where filepath="%s"',$path));
}

/**
* API: Returns the file-object
* @fid: the file-id
*/
function wysiwyg_imageupload_load_file($fid) {
  return db_fetch_object(db_query('select * from {files} where fid="%d"',$fid));
}

/**
* API: Use this method to get uploaded images as a 'list'.
* Images are sorted by date (youngest first).
* @limit: limit the result set to a specific number
* @uid: Only images uploaded by that user are returned
*/
function wysiwyg_imageupload_get_images($limit = NULL, $uid = NULL, $group = null) {
  if ($limit != NULL) {
    $limit = " LIMIT $limit";
  }
  if ($group != NULL) {
    $group = " GROUP BY $group";
  }
  if ($uid != NULL) {
    $result = db_query('SELECT f.*,w.* as parent_nid FROM {files} as f RIGHT JOIN {wysiwyg_imageupload_entity} AS w on w.fid = f.fid WHERE f.uid = %d'.$group.' ORDER BY f.timestamp DESC'.$limit,$uid);
  } else {
    $result = db_query('SELECT f.*,w.* as parent_nid FROM {files} as f RIGHT JOIN {wysiwyg_imageupload_entity} AS w on w.fid = f.fid'.$group.' ORDER BY f.timestamp DESC'.$limit);
  }
  
  if ($result != FALSE) {
    $images = array();
    while ($row = db_fetch_array($result)) {
      $images[] = $row;
    };
    return $images;
  }
// else
return array();
}

/**
* Implementation of hook_theme
* wysiwyg_imageupload_render_image: renders the image for the node view
* wysiwyg_imageupload_render_image_wysiwyg: renders the view for the wysiwyg editor. DONT CHANGE THIS
*/
function wysiwyg_imageupload_theme() {
  return array(
    'wysiwyg_imageupload_render_image_entity' => array(
      'arguments' => array(
        'imgage_obj',
        'arguments' => array(),
      ),
    ),
    'wysiwyg_imageupload_render_image' => array(
      'arguments' => array(
        'imgage_obj',
        'arguments' => array(),
    ),
    ),
    'wysiwyg_imageupload_render_meta' => array(
      'arguments' => array(
        'imgage_obj',
        'arguments' => array(),
    ),
    ),
    'wysiwyg_imageupload_render_container' => array(
      'arguments' => array(
        'image',
        'meta',
        'imgage_obj',
        'arguments' => array(),
      ),
    ),
    'wysiwyg_imageupload_render_image_wysiwyg' => array(
      'arguments' => array(
        'imgage_obj',
        'arguments' => array(),
      ),
    ),
  );
}

/**
* wysiwyg_imageupload_render_image: renders the image for the node view
*/
function theme_wysiwyg_imageupload_render_image_entity($img_obj, $arguments) {
  $image = theme('wysiwyg_imageupload_render_image', $img_obj, $arguments);
  $meta = theme('wysiwyg_imageupload_render_meta', $img_obj, $arguments);
  return theme('wysiwyg_imageupload_render_container', $image, $meta, $img_obj, $arguments);
}

/**
* wysiwyg_imageupload_render_image: renders the image for the node view
*/
function theme_wysiwyg_imageupload_render_image($img_obj, $arguments) {
  // If the use set custom sizes
  if($arguments['width'] != '') {
    $width = " width='{$size['width']}'";
  }
  if($arguments['height'] != '') {
    $height = " height='{$size['height']}'";
  }
  //$inline_args = join('|', array($img_obj->iid, $arguments['height'], $arguments['width']));
  $inline_args = $img_obj->iid;
  $attributes = array(
    'class' => 'wysiwyg_imageupload',
    'style' => '',
  );
  drupal_alter('wysiwyg_imageupload_image_attribute',$attributes,$img_obj);

  $output = theme('imagecache', $img_obj->imagecache, $img_obj->filepath, $inline_args, $img_obj->title, $attributes, TRUE, FALSE);
  drupal_alter('wysiwyg_imageupload_rendered_image',$output,$img_obj);
  return $output;
}


/**
* Renders the meta data of an image. By default only the title
*/
function theme_wysiwyg_imageupload_render_meta($img_obj,$arguments) {
  return "<h4 class='image_title'>{$img_obj->title}</h4>";
}

/**
* Renders the meta container of an image.
*/
function theme_wysiwyg_imageupload_render_container($image,$meta,$img_obj,$arguments) {
  return "$image <div class'image_meta'>$meta</div>";
}

/**
* wysiwyg_imageupload_render_image_wysiwyg: renders the view for the wysiwyg editor. DONT CHANGE THIS
*/
function theme_wysiwyg_imageupload_render_image_wysiwyg($img_obj, $arguments = array()) {
  // If the use set custom sizes
  if($arguments['width'] != '') {
    $width = " width='{$size['width']}'";
  }
  if($arguments['height'] != '') {
    $height = " height='{$size['height']}'";
  }
  $inline_args = $img_obj->iid;
  $attributes = array(
    'class' => 'wysiwyg_imageupload',
  );

  $output = theme('imagecache', $img_obj->imagecache, $img_obj->filepath, $inline_args, $img_obj->title, $attributes,NULL,false);
  return $output;
}

/**
*  Those presets are needed for the browser and the details form
*/
function wysiwyg_imageupload_imagecache_default_presets() {
  $presets = array();
  $presets['wysiwyg_imageupload_preview'] = array (
    'presetname' => 'wysiwyg_imageupload_preview',
    'actions' => array (
      0 => array (
  'weight' => '0',
  'module' => 'imagecache',
  'action' => 'imagecache_scale',
  'data' => array (
    'height' => '150',
    'width' => '220',
    'upscale' => 1,
  ),
      ),
    )
  );

  return $presets;
}

/**
* Computes the array with all allowed presets
*/
function _wysiwyg_imagegupload_allowed_presets() {
  $defaults = array();
  $presets = imagecache_presets();
  foreach ($presets as $preset) {
    // We cant use the presetid here (http://drupal.org/node/694188).
    $defaults[$preset['presetname']] = t("!preset",array('!preset' =>$preset['presetname']));
  }
  $presets_whitelist = variable_get('wysiwyg_imageupload_presets_whitelist', $defaults);
  // Get all disabled keys (value === 0).
  $disabled_presets = array_keys($presets_whitelist,0, TRUE);

  // Remove those keys from the result.
  foreach($disabled_presets as $value) {
    unset($presets_whitelist[$value]);
  }

  return $presets_whitelist;
}

/**
* Checks if the current node has revisioning activated
*/
function _wysiwyg_imagegupload_revisions_activated($type) {
  // Is this content even in moderatation?
  $var = variable_get( "node_options_$type", array(0));
  if( array_search('revision',$var) ) {
    return 1;
  }
  //else
  return 0;
}

function _wysiwyg_imageupload_check_dependencies() {  
  $error = false;
  $jquiv = jquery_ui_get_version();
  if (!preg_match('@1\.7\.\d+@',$jquiv)) {
    drupal_set_message('You jquery ui library version is to old to use wysiwyg_imageupload. You need at least 1.7.x and you are currently running '.$jquiv. ' Please read <a href="http://drupal.org/node/809812">this howto</a> on how to fix this.','error');
    $error = true;
  }
  
  $jqv = jquery_update_get_version();
  if (!preg_match('@1\.3\.\d+@',$jqv)) {
    drupal_set_message('Your jquery version is to old to use wysiwyg_imageupload. Therefore you need to install <a href="http://drupal.org/project/jquery_update">jquery_update</a> 6.2.x, not jquery_update 6.1.x Please read point 3 at <a href="http://drupal.org/node/809608">this howto</a> to fix this.','error');
    $error = true;
  }
  
  $toolkits = imageapi_get_available_toolkits();
  
  if(!array($toolkits) || count($toolkits) == 0) {
    drupal_set_message('You need to have at least one ImageAPI library activated 6.2.x to use wysiwyg_imageupload. Please read point 4 at <a href="http://drupal.org/node/809608">this howto</a> on ho to fix this. Go to your '.l('modules page','admin/build/modules/list').' under section "imagecache"','error');
    $error = true;
  }
  
  $roles = user_roles(false,'use wysiwyg image upload'); 
  if(!array($roles) || count($roles) == 0) {
    drupal_set_message('You did not give any role the "use wysiwyg image upload" permission, so nobody can use wysiwyg_imageupload. Please read point 8 at <a href="http://drupal.org/node/809608">this howto</a> on ho to fix this.','error');
    $error = true;
  }
  return $error;
}